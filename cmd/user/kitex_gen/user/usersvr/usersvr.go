// Code generated by Kitex v0.4.4. DO NOT EDIT.

package usersvr

import (
	"context"
	user "douyinV/cmd/user/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userSvrServiceInfo
}

var userSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserSvr"
	handlerType := (*user.UserSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newUserSvrRegisterArgs, newUserSvrRegisterResult, false),
		"Login":    kitex.NewMethodInfo(loginHandler, newUserSvrLoginArgs, newUserSvrLoginResult, false),
		"UserInfo": kitex.NewMethodInfo(userInfoHandler, newUserSvrUserInfoArgs, newUserSvrUserInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSvrRegisterArgs)
	realResult := result.(*user.UserSvrRegisterResult)
	success, err := handler.(user.UserSvr).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSvrRegisterArgs() interface{} {
	return user.NewUserSvrRegisterArgs()
}

func newUserSvrRegisterResult() interface{} {
	return user.NewUserSvrRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSvrLoginArgs)
	realResult := result.(*user.UserSvrLoginResult)
	success, err := handler.(user.UserSvr).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSvrLoginArgs() interface{} {
	return user.NewUserSvrLoginArgs()
}

func newUserSvrLoginResult() interface{} {
	return user.NewUserSvrLoginResult()
}

func userInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserSvrUserInfoArgs)
	realResult := result.(*user.UserSvrUserInfoResult)
	success, err := handler.(user.UserSvr).UserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserSvrUserInfoArgs() interface{} {
	return user.NewUserSvrUserInfoArgs()
}

func newUserSvrUserInfoResult() interface{} {
	return user.NewUserSvrUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserSvrRegisterArgs
	_args.Req = req
	var _result user.UserSvrRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserSvrLoginArgs
	_args.Req = req
	var _result user.UserSvrLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserInfo(ctx context.Context, req *user.UserInfoRequest) (r *user.UserInfoResponse, err error) {
	var _args user.UserSvrUserInfoArgs
	_args.Req = req
	var _result user.UserSvrUserInfoResult
	if err = p.c.Call(ctx, "UserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
