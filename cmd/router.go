// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"strconv"
	"tiktok/biz/handler"
	"tiktok/feed/kitex_gen/api"
	"tiktok/mock"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/ping", handler.Ping)

	r.GET("/resource/:type/:filename", func(c context.Context, ctx *app.RequestContext) {
		ctx.File(fmt.Sprintf("../resource/%s/%s", ctx.Param("type"), ctx.Param("filename")))
	})

	r.POST("/douyin/user/login/", func(c context.Context, ctx *app.RequestContext) {
		un, pw := ctx.Query("username"), ctx.Query("password")
		user := mock.GetUserByUsername(un)
		if user == nil || pw != user.Password {
			ctx.JSON(200, utils.H{
				"status_code": -1,
				"status_msg":  "账号或密码错误",
			})
			return
		}
		ctx.JSON(200, utils.H{
			"status_code": 0,
			"user_id":     user.Basic.Id,
			"token":       user.Token,
		})
	})

	r.GET("douyin/user/", func(c context.Context, ctx *app.RequestContext) {
		token := ctx.Query("token")
		uid, _ := strconv.Atoi(token)
		ctx.JSON(200, utils.H{
			"status_code": 0,
			"user":        mock.GetUserByID(uid).Basic,
		})
	})

	r.GET("/douyin/relation/friend/list/", func(c context.Context, ctx *app.RequestContext) {
		token := ctx.Query("token")
		uid, _ := strconv.Atoi(token)
		if uid == 1 {
			ctx.JSON(200, utils.H{
				"status_code": 0,
				"user_list":   []api.User{mock.GetUserByID(2).Basic},
			})
		} else {
			ctx.JSON(200, utils.H{
				"status_code": 0,
				"user_list":   []api.User{mock.GetUserByID(1).Basic},
			})
		}
	})
}
