// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentsvr

import (
	"context"
	comment "douyinV/kitex_gen/comment"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentSvrServiceInfo
}

var commentSvrServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentSvr"
	handlerType := (*comment.CommentSvr)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action":         kitex.NewMethodInfo(actionHandler, newCommentSvrActionArgs, newCommentSvrActionResult, false),
		"List":           kitex.NewMethodInfo(listHandler, newCommentSvrListArgs, newCommentSvrListResult, false),
		"Count":          kitex.NewMethodInfo(countHandler, newCommentSvrCountArgs, newCommentSvrCountResult, false),
		"CountInBatches": kitex.NewMethodInfo(countInBatchesHandler, newCommentSvrCountInBatchesArgs, newCommentSvrCountInBatchesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentSvrActionArgs)
	realResult := result.(*comment.CommentSvrActionResult)
	success, err := handler.(comment.CommentSvr).Action(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentSvrActionArgs() interface{} {
	return comment.NewCommentSvrActionArgs()
}

func newCommentSvrActionResult() interface{} {
	return comment.NewCommentSvrActionResult()
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentSvrListArgs)
	realResult := result.(*comment.CommentSvrListResult)
	success, err := handler.(comment.CommentSvr).List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentSvrListArgs() interface{} {
	return comment.NewCommentSvrListArgs()
}

func newCommentSvrListResult() interface{} {
	return comment.NewCommentSvrListResult()
}

func countHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentSvrCountArgs)
	realResult := result.(*comment.CommentSvrCountResult)
	success, err := handler.(comment.CommentSvr).Count(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentSvrCountArgs() interface{} {
	return comment.NewCommentSvrCountArgs()
}

func newCommentSvrCountResult() interface{} {
	return comment.NewCommentSvrCountResult()
}

func countInBatchesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentSvrCountInBatchesArgs)
	realResult := result.(*comment.CommentSvrCountInBatchesResult)
	success, err := handler.(comment.CommentSvr).CountInBatches(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentSvrCountInBatchesArgs() interface{} {
	return comment.NewCommentSvrCountInBatchesArgs()
}

func newCommentSvrCountInBatchesResult() interface{} {
	return comment.NewCommentSvrCountInBatchesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, req *comment.ActionRequest) (r *comment.ActionResponse, err error) {
	var _args comment.CommentSvrActionArgs
	_args.Req = req
	var _result comment.CommentSvrActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, req *comment.ListRequest) (r *comment.ListResponse, err error) {
	var _args comment.CommentSvrListArgs
	_args.Req = req
	var _result comment.CommentSvrListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Count(ctx context.Context, req *comment.CountRequest) (r *comment.CountResponse, err error) {
	var _args comment.CommentSvrCountArgs
	_args.Req = req
	var _result comment.CommentSvrCountResult
	if err = p.c.Call(ctx, "Count", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CountInBatches(ctx context.Context, req *comment.CountInBatchesRequest) (r *comment.CountInBatchesResponse, err error) {
	var _args comment.CommentSvrCountInBatchesArgs
	_args.Req = req
	var _result comment.CommentSvrCountInBatchesResult
	if err = p.c.Call(ctx, "CountInBatches", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
