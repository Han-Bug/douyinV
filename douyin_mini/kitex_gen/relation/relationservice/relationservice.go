// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	relation "douyin_mini/kitex_gen/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":          kitex.NewMethodInfo(relationActionHandler, newRelationServiceRelationActionArgs, newRelationServiceRelationActionResult, false),
		"GetRelationFollowList":   kitex.NewMethodInfo(getRelationFollowListHandler, newRelationServiceGetRelationFollowListArgs, newRelationServiceGetRelationFollowListResult, false),
		"GetRelationFollowerList": kitex.NewMethodInfo(getRelationFollowerListHandler, newRelationServiceGetRelationFollowerListArgs, newRelationServiceGetRelationFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationActionArgs)
	realResult := result.(*relation.RelationServiceRelationActionResult)
	success, err := handler.(relation.RelationService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionArgs() interface{} {
	return relation.NewRelationServiceRelationActionArgs()
}

func newRelationServiceRelationActionResult() interface{} {
	return relation.NewRelationServiceRelationActionResult()
}

func getRelationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetRelationFollowListArgs)
	realResult := result.(*relation.RelationServiceGetRelationFollowListResult)
	success, err := handler.(relation.RelationService).GetRelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetRelationFollowListArgs() interface{} {
	return relation.NewRelationServiceGetRelationFollowListArgs()
}

func newRelationServiceGetRelationFollowListResult() interface{} {
	return relation.NewRelationServiceGetRelationFollowListResult()
}

func getRelationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetRelationFollowerListArgs)
	realResult := result.(*relation.RelationServiceGetRelationFollowerListResult)
	success, err := handler.(relation.RelationService).GetRelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetRelationFollowerListArgs() interface{} {
	return relation.NewRelationServiceGetRelationFollowerListArgs()
}

func newRelationServiceGetRelationFollowerListResult() interface{} {
	return relation.NewRelationServiceGetRelationFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args relation.RelationServiceRelationActionArgs
	_args.Req = req
	var _result relation.RelationServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelationFollowList(ctx context.Context, req *relation.RelationFollowListRequest) (r *relation.RelationFollowListResponse, err error) {
	var _args relation.RelationServiceGetRelationFollowListArgs
	_args.Req = req
	var _result relation.RelationServiceGetRelationFollowListResult
	if err = p.c.Call(ctx, "GetRelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelationFollowerList(ctx context.Context, req *relation.RelationFollowerListRequest) (r *relation.RelationFollowerListResponse, err error) {
	var _args relation.RelationServiceGetRelationFollowerListArgs
	_args.Req = req
	var _result relation.RelationServiceGetRelationFollowerListResult
	if err = p.c.Call(ctx, "GetRelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
